# 인터넷통신
1. IP(인터넷프로토콜)
패킷이라는 통신단위로 데이터 전달.
IP패킷정보에는 출발지ip,목적지ip,기타 등등...

2. TCP / UDP
- TCP 전송제어 프로토콜
 연결지향(3wayhandshake), 데이터 전달 보증 ,순서보장

- UDP
 데이터전달 및 순서가 보장되지 않지만, 단순하고 빠름.
IP와 거의 같지만 port정보가 있음.


# URI와 웹브라우저 요청 흐름
URI (Uniform Resource Identifier)
URI는 로케이터(URL),이름 (URN)또는 둘다 추가로 분류될 수 있다.
URL - 리소스가 있는 위치를 지정
URN - 리소스에 이름을 부여

- 애플리케이션 영역
웹브라우저가 HTTP 메시지 생성 후
SOCKET 라이브러리를 통해 전달. (TCP/IP 연결,데이터전달)
- OS 영역
TCP/IP 패킷 생성, HTTP 메시지포함
네트워크 인터페이스 영역 통해서 서버로

# 모든것이 HTTP( HyperText Transfer Protocol )
Http 특징
1. 클라이언트 서버 구조
2. 무상태프로토콜(스테이스리스),비연결성
서버가 클라이언트 상태를 보존하지 않음.
중간에 다른 점원으로 바뀌어도 된다.(클라이언트 요청이 증가해도 괜찮다)
3. HTTP 메시지
4. 단순함,확장가능


# URI 설계
URI 설계는 리소스 식별이 중요. 리소스와 행위를 분리.
URI 계층 구조 활용.
ex) /members/{id}
리소스 : 회원
행위 : 조회, 등록, 삭제, 변경

* HTTP 메서드 종류
GET : 리소스 조회
POST : 요청 데이터 처리, 주로 등록에사용
PUT : 리소스를 대체, 해당리소스가 없으면 생성 
PATCH : 리소스 부분 변경
DELETE : 리로스 삭제

그외 HEAD , OPTIONS , CONNECT ,TRACE

# POST
메시지 바디를 통해 서버로 요청 데이터 전달.
주로 신규 리소스 등록

# 클라이언트에서 서버로 데이터 전송
1. 쿼리파라미터를 통한 데이터 전송 
	GET,주로 정렬필터(검색어)
2. 메시지 바디를 통한 데이터 전송
	 POST,PUT,PATCH 회원가입,상품주문,리소스등록,리소스변경
	
# HTTP API 설계 예시
1. 컬렉션 : POST 기반 ( 서버가 관리하는 리소스 저장소)
2. 스토어 : PUT 기반(클라이언트가 관리하는 리소스 저장소)
3. HTML FORM 사용
HTML FORM 은 GET,POST만 지원.
HTTP 메서드로 해결하기 애매하면 경우 컨트롤 URI 사용.


# URI 설계 개념
1. 문서 :
	단일 개념(파일하나,객체인스턴스,데이터베이스 ROW)
 ex) /memebers/100 , /files/star.jpg
2. 컬렉션 : 
	서버가 관리하는 리소스 디렉터리
   	서버가 리소스의 URI를 생성하고 관리
 ex) /members
3. 스토어
	클라이언트가 관리하는 자원 저장소
	클라이언특다 리소스의 URI를 알고 관리
ex) /files
4. 컨트롤러,컨트롤 URI
	문서,컬렉션,스토어로 해결하기 어려운 추가 프로세스 실행
	동사를 직접사용
ex) /members/{id}/delete
https://restfulapi.net/resource-naming



# HTTP 상태코드
1. 1xx : 요청이 수신되어 처리중
2. 2xx : 요청 정상 처리
3. 3xx : 요청을 완료하려면 추가 행동이 필요
4. 4xx : 클라이언트 오류, 잘못된 문법등으로 서버가 요청을 수행할 수 없음
5. 5xx : 서버오류, 서버가 정상 요청을 처리하지 못함.

# 2xx(Successful)
200 ok
 GET으로 조회 할때 성공 하는 경우
201 created
 POST로 한 경우 서버에서 생성된 리소스는 응답의 Location 헤더 필도로 식별
202 Accepted
 요청이 접수는 됫으나 처리가 완료되지 않았음( ex. 배치 처리 같은 곳에서 사용)
204 Nocoment
 서버가 요청을 성공적으로 수행했지만, 응답 페이로드 본문에 보낼 데이터가 없음.(ex 웹문서 편집기에  save버튼)


# 3xx - 리다이렉션
웹브라우저는 3xx 응답의 결과에 Location 헤더가 있으면 자동으로 이동함.
301 : ex. /event 치고 들어왔는데 이제 안쓰고 /new-event 쓸때. 자동으로 301 내고 자동 리다이렉트 시켜줌.
	(영구 리다이렉션,일시리다렉션,특수리다이렉션)


- 영구리다이렉션 에 301,308이 있는데 차이가 잇음
301은 POST로 보냈을때 본문 없애고 GET으로 감. (보통 이렇게 씀)
308은 POST로 보냈을땐 본문 유지함. 

- 일시적 리다이렉션
302 : 리다이렉트 요청 메서드가 GET으로 변하고, 본문이 제거될 수 있음.
307 : 302와 기능 같고 메서드와 본문 유지.
303 : 무조건 GET으로 변경.

# PRG : Post/Redirect/Get
ex. POST로 주문후에 웹 브라우저를 새로고침한다면? 새로고침은 다시 요청이라 중복 주문이 될 수 있다.

304 : 캐시를 목적으로 사용
클라이언트에게 리소스가 수정되지 않았음을 알려준다. 따라서 클라이언트는 로컬PC에 저장된 캐시를 재사용한다.
응답에 메시지 바디를 포함하면 안된다.


# 4xx 클라이언트 오류
중요! 클라이언트가 이미 잘못된 요청 ,데이터를 보내고 있기 때문에 똑같은 재시도가 이러나도 계속 오류.
400 : 요청자체가 잘못.
401 : 인증되지 않음. 
	Authentication : 본인이 누구인지 확인(로그인)
	AUthorization : 권한부여 레벨
403 : 서버가 요청을 이해했지만 승인을 거부함.
	주로 인증 자격 증명은 있지만, 접근 권한이 불충분한 경우.(ex. 어드민 등급이 아닌자가 어드민 등급꺼를 요청할때)
404 : 요청 리소스를 찾을 수 없음. 

# 5xx 서버 오류
500 : 애매하면 모두 500 오류
503 : 서버가 일시적인 과부하 또는 예정된 작업으로 잠시 요청을 처리할 수 없음.

# HTTP 헤더 
* 표현 헤더
1. Content-Type : 표현 데이터의 형식
2. Content-Encoding : 표현 데이터의 압축 방식(ex. gzip,deflate,identity...)
3. Content-Language : 표현 데이터의 자연언어 ( ex. ko,en,en-us...)
4. Content-Length : 표현 데이터의 길이.(Transfer-Encoding을 사용하면 Content-Length는 사용하면 안됨)

* 협상
1. Accept : 클라이언트가 선호하는 미디어 타입 전달
2. Accept-Charset : 클라이언트가 선호하는 문자 인코딩
3. Accept-Encoding : 클라이언트가 선호하는 압축 인코딩
4. Accept-Language : 클라이언트가 선호하는 자연언어

* 전송방식 설명
1.일반전송, 압축전송 , 분할전송(Transfer-Encoding : chunked), 범위전송(Content-Range : byte 1001~2000)

* 일반 정보
1. Referer : 이전 웹 페이지 주소.
2. User-agent : 클라이언트의 애플리케이션 정보 (웹브라우저 정보 등등)
3. Server : 요청을 처리하는 ORIGIN 서버의 소프트웨어의 정보
4. Date

* 특별한 정보
1. Host : 요청에서만 사용, 필수 , 하나의 서버가 여러 도메인을 처리해야 할 때 ,IP로만 하면 찾을 수 없으니까.
2. Location : 웹브라우저는 3xx 응답의 결과에 Location 헤더가 있으면 Location 위치로 자동 이동.
3. Allow : 405에서 응답에 포함해야함. ex. GET,HEAD,PUT 정보만 지원합니다.
4. Retry-After : 503 일때 서비스가 언제까지 불능인지 알려줄 수 있음.

* 인증
1. Authorization : 클라이언트 인증정보를 서버에 전달.
인증과 관련된 값 넣어주면 됨.
2. WWW-Authorizaton : 인증관련된 값 예시로 보여주는거

* 쿠키
1. Set-Cookie : 서버에서 클라이언트로 쿠키 전달
2. Cookie : 클라이언트가 서버에서 받은 쿠키를 저장하고 , HTTP
쿠키는 항상 서버에 전송됨.
3. 웹스토리지 : 쿠키는 서버에 보내지만 서버에 보내지지 않고 클라이언트 웹브라우저에 저장해놓고 쓰고 싶으면 웹스토리지 쓰면 됨(localStorage)

* 캐시
ex. cache-control : max-age=60
브라우저에는 캐시메모리 영역이 있음. 60초 동안 같은 요청 왔을때, 캐시메모리에서 가져옴.
Etag,시간으로 캐시 시간이 지났지만, 캐시메모리에 있는데 서버와 같으면 304로 바디없이 서버에서 줌.
1. Cache-Control : max-age 캐시유효시간,초단위 / no-cache 데이터는 캐시해도되지만 origin서버에 검증하고 쓰세요 / no-store 데이터에 민감한 정보가 있으므로 저장하면 안됨.
ETag
Last-Modified

* 프록시캐시
Origin 서버 중간에 프록시캐시서버를 둬서 빠르게 함.(public 캐시) private 캐시는 유저의 로컬.
Cache-Control : public 응답이 public 캐시에 저장되어도 됨.

* 캐시무효화
Cache-Control : no-cache,no-store,must-revalidate
pragma : no-cache






















